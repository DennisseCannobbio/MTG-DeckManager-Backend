version: '3.8'

# ⚠️  IMPORTANT: This file requires environment variables!
# 
# For development:
#   1. Copy .env.docker.example to .env.docker
#   2. Edit .env.docker with your credentials
#   3. Run: docker-compose --env-file .env.docker up
#
# For production:
#   Set environment variables in your deployment system

services:
  # =================================
  # MongoDB Database
  # =================================
  mongodb:
    image: mongo:6.0
    container_name: mtg-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGO_DATABASE}
    ports:
      - "${MONGO_PORT}:27017"
    volumes:
      - mongodb_data:/data/db
      - mongodb_config:/data/configdb
    networks:
      - mtg-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # =================================
  # MTG Deck Manager API
  # =================================
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: mtg-api
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV}
      PORT: ${API_PORT}
      # MONGODB_URI: mongodb://mongodb:27017/${MONGO_DATABASE}
      MONGODB_URI: mongodb://${MONGO_ROOT_USERNAME}:${MONGO_ROOT_PASSWORD}@mongodb:27017/${MONGO_DATABASE}?authSource=admin
      CORS_ORIGIN: ${CORS_ORIGIN}
      LOG_LEVEL: ${LOG_LEVEL}
    ports:
      - "${API_PORT}:3000"
    volumes:
      - api_uploads:/app/uploads
      - api_logs:/app/logs
    networks:
      - mtg-network
    depends_on:
      mongodb:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # =================================
  # MongoDB Admin Interface (Optional)
  # =================================
  mongo-express:
    image: mongo-express:1.0.0
    container_name: mtg-mongo-express
    restart: unless-stopped
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: ${MONGO_ROOT_USERNAME}
      ME_CONFIG_MONGODB_ADMINPASSWORD: ${MONGO_ROOT_PASSWORD}
      ME_CONFIG_MONGODB_URL: mongodb://${MONGO_ROOT_USERNAME}:${MONGO_ROOT_PASSWORD}@mongodb:27017/
      ME_CONFIG_BASICAUTH_USERNAME: ${MONGO_EXPRESS_USERNAME}
      ME_CONFIG_BASICAUTH_PASSWORD: ${MONGO_EXPRESS_PASSWORD}
      ME_CONFIG_MONGODB_ENABLE_ADMIN: "true"
    ports:
      - "${MONGO_EXPRESS_PORT}:8081"
    networks:
      - mtg-network
    depends_on:
      mongodb:
        condition: service_healthy
    profiles:
      - admin # Only start with: docker-compose --profile admin up

# =================================
# Networks
# =================================
networks:
  mtg-network:
    driver: bridge
    name: mtg-deck-manager-network

# =================================
# Volumes for data persistence
# =================================
volumes:
  mongodb_data:
    name: mtg-mongodb-data
    driver: local
  mongodb_config:
    name: mtg-mongodb-config
    driver: local
  api_uploads:
    name: mtg-api-uploads
    driver: local
  api_logs:
    name: mtg-api-logs
    driver: local